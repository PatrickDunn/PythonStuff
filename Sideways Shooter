#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
 Simple keyboard shooter code in pygame
 
 Based on Sample Python/Pygame Programs
 Simpson College Computer Science
 http://programarcadegames.com/
 http://simpson.edu/computer-science/
 
"""

import pygame
import random
from random import randrange

# Define some colors

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
MAX_STARS = 50
STAR_SPEED = 3


# --- Classes

class Block(pygame.sprite.Sprite):

    """ This class represents the block. """

    def __init__(self):

        # Call the parent class (Sprite) constructor

        super().__init__()

        self.image = pygame.Surface([20, 15])
        self.image.fill(BLUE)

        self.rect = self.image.get_rect()

        # self.centre_x = 0
        # self.centre_y = 1

    def update(self):
        self.rect.x -= self.centre_y


class Player(pygame.sprite.Sprite):

    """ This class represents the Player. """

    def __init__(self):
        """ Set up the player on creation. """

        # Call the parent class (Sprite) constructor

        super().__init__()

        self.image = pygame.Surface([20, 20])
        self.image.fill(RED)

        self.rect = self.image.get_rect()

    def update(self):
        """ Update the player's position. """


class Bullet(pygame.sprite.Sprite):

    """ This class represents the bullet . """

    def __init__(self):

        # Call the parent class (Sprite) constructor

        super().__init__()

        self.image = pygame.Surface([10, 4])
        self.image.fill(WHITE)

        self.rect = self.image.get_rect()

    def update(self):
        """ Move the bullet. """

        self.rect.x += 6


def init_stars(screen):
    """ Create the starfield """

    global stars
    stars = []
    for i in range(MAX_STARS):

    # A star is represented as a list with this format: [X,Y]

        star = [randrange(0, screen.get_width() - 1), randrange(0,
                screen.get_height() - 1)]
        stars.append(star)


# starfeild

def move_and_draw_stars(screen):
    """ Move and draw the stars in the given screen """

    global stars
    for star in stars:
        star[0] -= STAR_SPEED

    # If the star hit the bottom border then we reposition
    # it in the top of the screen with a random X coordinate.

        if star[0] < 0:
            star[0] = screen.get_width()
            star[1] = randrange(0, 300)

        screen.set_at(star, (255, 255, 255))


# --- Create the window

# Initialize Pygame

pygame.init()

# Set the height and width of the screen

screen_width = 800
screen_height = 300
screen = pygame.display.set_mode([screen_width, screen_height])

init_stars(screen)

# --- Sprite lists

# This is a list of every sprite. All blocks and the player block as well.

all_sprites_list = pygame.sprite.Group()

# List of each block in the game

block_list = pygame.sprite.Group()

# List of each bullet

bullet_list = pygame.sprite.Group()

# --- Create the sprites

# Create a red player block

player = Player()
all_sprites_list.add(player)

# Loop until the user clicks the close button.

done = False

# Used to manage how fast the screen updates

clock = pygame.time.Clock()

score = 0
player.xspeed = 0
player.yspeed = 0
player.rect.x = 40
player.rect.y = 100

# -------- Main Program Loop -----------

while not done:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

        if event.type == pygame.KEYDOWN:

            # Fire a bullet if the user clicks the mouse button

            if event.key == pygame.K_z:
                bullet = Bullet()

            # Set the bullet so it is where the player is

                bullet.rect.x = player.rect.x + 20
                bullet.rect.y = player.rect.y + 5

            # Add the bullet to the lists

                all_sprites_list.add(bullet)
                bullet_list.add(bullet)

        if event.type == pygame.KEYDOWN:

            # Figure out if it was an arrow key. If so
            # adjust speed.

            if event.key == pygame.K_LEFT and player.rect.x > 30:
                player.xspeed = -3
            elif event.key == pygame.K_RIGHT:
                player.xspeed = 3
            elif event.key == pygame.K_UP:
                player.yspeed = -3
            elif event.key == pygame.K_DOWN:
                player.yspeed = 3
        elif event.type == pygame.KEYUP:

        # User let up on a key

            # If it is an arrow key, reset vector back to zero

            if event.key == pygame.K_LEFT or event.key \
                == pygame.K_RIGHT:
                player.xspeed = 0
            elif event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                player.yspeed = 0

    # --- Game logic

    player.rect.x = player.rect.x + player.xspeed
    player.rect.y = player.rect.y + player.yspeed

    if player.rect.x > 500:
        player.rect.x = 500
    elif player.rect.x < 41:
        player.rect.x = 41
    elif player.rect.y > 280:
        player.rect.y = 280
    elif player.rect.y < 4:
        player.rect.y = 4

    # Call the update() method on all the sprites

    # Calculate mechanics for each bullet

    for bullet in bullet_list:

        # See if it hit a block

        block_hit_list = pygame.sprite.spritecollide(bullet,
                block_list, True)

        # For each block hit, remove the bullet and add to the score

        for block in block_hit_list:
            bullet_list.remove(bullet)
            all_sprites_list.remove(bullet)
            block_list.remove(Block)
            all_sprites_list.remove(Block)
            score += 1

        # Remove the bullet if it flies up off the screen

        if bullet.rect.x > 810:
            bullet_list.remove(bullet)
            all_sprites_list.remove(bullet)


    for i in range(30):
        createblock = random.randrange(0, 8)
        if len(block_list) < 3 and createblock < 2:
           
            block = Block()
            block.rect.x = 800
            block.rect.y = random.randrange(10, screen_height - 20)
            block.centre_y = random.randrange(2, 5)

            block_list.add(block)
            all_sprites_list.add(block)

    for block in block_list:
        if block.rect.x < 0:
            block_list.remove(block)
            all_sprites_list.remove(block)

    # print (block.rect.x)

    print (createblock)

    # --- Draw a frame

    all_sprites_list.update()

    # Clear the screen

    screen.fill(BLACK)

    # Draw all the spites

    all_sprites_list.draw(screen)

    # Go ahead and update the screen with what we've drawn.

    move_and_draw_stars(screen)
    pygame.display.flip()

    # --- Limit to 20 frames per second

    clock.tick(60)

pygame.quit()
